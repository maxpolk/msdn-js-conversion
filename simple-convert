#! /usr/bin/env python
'''
Convert an html file into MediaWiki syntax.
'''

import sys
from xml.etree import ElementTree

usage = "Usage: simple-convert INPUTFILE ELEMENTID"

# Parse args
if len (sys.argv) != 3:
    raise Exception ("ERROR: Invalid number of arguments\n{:}".format (usage))
inputfile = sys.argv[1]
elementid = sys.argv[2]

# Parse XML file and find element having given id
tree = ElementTree.parse (inputfile)
root = tree.getroot ()
element = root.find (".[@id='{:}']".format (elementid))
if (element is None):
    element = root.find (".//*[@id='{:}']".format (elementid, elementid))

# See if we found it
if (element is None):
    raise Exception ("ERROR: Unable to find element having id {:}".format (elementid))

def allText (element):
    '''
    Returns whitespace-stripped concatenated child text node values, or None if empty.

    Operates recursively, ignoring element structure.
    '''
    textFragments = []
    for part in element.itertext ():
        less = part.strip ()
        if (less != ""):
            textFragments.append (less)
    if (len (textFragments) == 0):
        return None
    else:
        return ''.join (textFragments)

def convertLink (href, text):
    '''
    Convert a link to either an external link: [http://external.site/whatever Text]
    or else a page link: [[Page|Text]].
    '''
    if (href[:4] == "http"):
        # External link, space separator
        return "[{:} {:}]".format (href, text)
    else:
        # Internal link, remove the HTML suffix if present, bar separator
        if (href[-5:] == ".html"):
            href = href[:-5]
        return "[[{:}|{:}]]".format (href, text)

def convertText (element):
    '''
    Given an element such as 'p', convert all the text within it recursively into
    MediaWiki syntax.

    This does more than allText:
    * Turns anchor hrefs into [http://whatever] style text.
    '''
    # First you get item.text, then child element, then child element "tail",
    # then next child element, next child element "tail", etc.
    frags = []
    for item in element.iter ():
        text = item.text
        if (text is not None):
            text = text.strip ()
            if (text == ""):
                text = None
        tail = item.tail
        if (tail is not None):
            tail = tail.strip ()
            if (tail == ""):
                tail = None
        if (item.tag == 'a' and text is not None):
            href = item.attrib.get ('href')
            if (href is not None):
                href = href.strip ()
                if (href == ""):
                    href = None
            if (href is not None):
                if (len (frags) > 0):
                    if (frags[-1][-1] != ' '):
                        frags.append (" ")
                frags.append (convertLink (href, text))
                if (tail is not None):
                    frags.append (tail)
        else:
            if (text is not None):
                frags.append (text)
            if (tail is not None):
                frags.append (tail)
    if (len (frags) == 0):
        return None
    else:
        return ''.join (frags)

def convertChildren (element, sectionDepth, listDepth, parents):
    '''
    Call convert on each child of element, the driver for recursion.
    '''
    parents.append (element.tag)
    for child in element:
        convert (child, sectionDepth, listDepth, parents)
    parents.pop ()

def convert_p (element, sectionDepth, listDepth, parents):
    '''
    Convert a paragraph into MediaWiki syntax.

    Rule: p becomes double-newline separated paragraphs, using only text node children.
    '''
    all = convertText (element)
    # Paragraphs need a normal line ending plus one more blank line
    print all + "\n"

def convert_div (element, sectionDepth, listDepth, parents):
    '''
    Convert a paragraph into MediaWiki syntax.

    Rule: div id becomes new section but only if it has non-whitespace text node children,
          use the div id as the section name.
    '''
    # sectionName = element.get ('id')
    # if (sectionName is None):
    #     sectionName = "unknown"
    # print "=" * sectionDepth + sectionName + "=" * sectionDepth
    convertChildren (element, sectionDepth + 1, listDepth, parents)

def convert_h1 (element, sectionDepth, listDepth, parents):
    '''
    Convert a heading into MediaWiki syntax.

    Rule: h1 text children nodes becomes "==text==", ignoring intermediate elements
          like span in the case of h1/span.
    '''
    all = allText (element)
    # Headers turn into sections with the right number of equals signs
    print "\n" + "=" * sectionDepth + all + "=" * sectionDepth

def convert_ul (element, sectionDepth, listDepth, parents):
    '''
    Convert a paragraph into MediaWiki syntax.

    Rule: ul/li become "* text"
    '''
    # Unordered lists we simply recurse and then 'li' gets converted
    convertChildren (element, sectionDepth, listDepth + 1, parents)

def convert_li (element, sectionDepth, listDepth, parents):
    '''
    Convert a paragraph into MediaWiki syntax.

    Rule: ul/li become "* text"
    '''
    #@@@TODO -- ensure parent is "ul"
    all = convertText (element)
    # List elements turn into the right number of asterisks
    print "*" * listDepth + " " + all

def convert_dl (element, sectionDepth, listDepth, parents):
    '''
    Convert a paragraph into MediaWiki syntax.

    Rule: dl/dt becomes "; text"
          dl/dd becomes ": text" (same line as above)
    '''
    # Definition list we simply recurse and the 'dt' gets converted
    convertChildren (element, sectionDepth, listDepth, parents)

def convert_dt (element, sectionDepth, listDepth, parents):
    '''
    Convert a paragraph into MediaWiki syntax.

    Rule: dl/dt becomes "; text"
          dl/dd becomes ": text" (same line as above)
    '''
    #@@@TODO -- ensure parent is "dl"
    all = convertText (element)
    # A semicolon and the definition term, expect a 'dd' afterward
    sys.stdout.write ("; " + all)

def convert_dd (element, sectionDepth, listDepth, parents):
    '''
    Convert a paragraph into MediaWiki syntax.

    Rule: dl/dt becomes "; text"
          dl/dd becomes ": text" (same line as above)
    '''
    #@@@TODO -- ensure parent is "dl" (and maybe previous sibling is "dt"?)
    all = convertText (element)
    # A definition follows a 'dt' and has a colon and content
    print ": " + all

def convert (element, sectionDepth, listDepth, parents):
    '''
    Convert html element into MediaWiki syntax according to a set of rules.
    '''
    # Grab all the combined text nodes underneath element
    all = allText (element)
    # Skip the element completely if there is no text inside of it anywhere
    if (all is not None):
        if (element.tag == "div"):
            convert_div (element, sectionDepth, listDepth, parents)
        elif (element.tag == "p"):
            convert_p (element, sectionDepth, listDepth, parents)
        elif (element.tag == "h1"):
            convert_h1 (element, sectionDepth, listDepth, parents)
        elif (element.tag == "ul"):
            convert_ul (element, sectionDepth, listDepth, parents)
        elif (element.tag == "li"):
            convert_li (element, sectionDepth, listDepth, parents)
        elif (element.tag == "dl"):
            convert_dl (element, sectionDepth, listDepth, parents)
        elif (element.tag == "dt"):
            convert_dt (element, sectionDepth, listDepth, parents)
        elif (element.tag == "dd"):
            convert_dd (element, sectionDepth, listDepth, parents)

# Start walking element recursively applying various rules
convertChildren (element, sectionDepth=2, listDepth=0, parents=[])
