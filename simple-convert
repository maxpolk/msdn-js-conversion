#! /usr/bin/env python
'''
Convert an html file into MediaWiki syntax.
'''

import sys
from xml.etree import ElementTree

usage = "Usage: simple-convert INPUTFILE ELEMENTID"

# Parse args
if len (sys.argv) != 3:
    raise Exception ("ERROR: Invalid number of arguments\n{:}".format (usage))
inputfile = sys.argv[1]
elementid = sys.argv[2]

# Parse XML file and find element having given id
tree = ElementTree.parse (inputfile)
root = tree.getroot ()
element = root.find (".[@id='{:}']".format (elementid))
if (element is None):
    element = root.find (".//*[@id='{:}']".format (elementid, elementid))

# See if we found it
if (element is None):
    raise Exception ("ERROR: Unable to find element having id {:}".format (elementid))

def allText (element):
    '''
    Returns whitespace-stripped concatenated child text node values, or None if empty.

    Operates recursively, ignoring element structure.
    '''
    textFragments = []
    for part in element.itertext ():
        less = part.strip ()
        if (less != ""):
            textFragments.append (escapeText (less))
    if (len (textFragments) == 0):
        return None
    else:
        return ''.join (textFragments)

def surroundWithSpace (frags, text, tail):
    '''
    Add space before and/or after text depending on context.

    Rule: if preceding fragment doesn't end with space, add preceding space.
    Rule: if tail doesn't begin with space, add trailing space.
    '''
    if (len (frags) > 0 and frags[-1] is not None):
        if (frags[-1][-1] != " " and frags[-1][-1] != "."):
            text = " " + text
    if (tail is not None and tail != "" and tail[0] != " " and tail[0] != "."):
        text = text + " "
    return text

def convertLink (href, text):
    '''
    Convert a link to either an external link: [http://external.site/whatever Text]
    or else a page link: [[Page|Text]].
    '''
    if (href[:4] == "http"):
        # External link, space separator
        return "[{:} {:}]".format (href, text)
    else:
        # Internal link, remove the HTML suffix if present, bar separator
        if (href[-5:] == ".html"):
            href = href[:-5]
        return "[[{:}|{:}]]".format (href, text)

def convertSpanText (element):
    '''
    Given a 'span' element, convert into MediaWiki syntax.

    This is a separate function called from top-level or nested text extraction.
    '''
    elementClass = element.attrib.get ("class")
    if (elementClass is not None and elementClass == "code"):
        # Do not call convertText, infinite recursion, just grab simple text
        return "<code>{:}</code>".format (escapeText (element.text))
    else:
        return escapeText (element.text)

def escapeText (text):
    '''
    Escapes text like | (special table meaning), or {{ (special template meaning),
    or XML chars like < and >.
    '''
    if (text is not None):
        text = text.replace ('{{', '<nowiki>{{</nowiki>')
        text = text.replace ('|', '{{!}}')
        text = text.replace ('&', '&amp;')
        text = text.replace ('<', '&lt;')
        text = text.replace ('>', '&gt;')
        text = text.replace ('>', '&gt;')
    return text

def convertText (element):
    '''
    Given an element such as 'p', convert all the text within it recursively into
    MediaWiki syntax.

    This does more than allText:
    * Turns anchor hrefs into [http://whatever] style text.
    * Escapes special chars like | (table syntax) and < and > (xml syntax)
    '''
    # First you get item.text, then child element, then child element "tail",
    # then next child element, next child element "tail", etc.  The "element.iter()"
    # will go deeper but not tell you, so we get number of children "len (item)"
    # and if there are children, push the tail data off until later in tailStack
    # to be added after the child returns.
    tailStack = []
    frags = []
    for item in element.iter ():
        childrenCount = len (item)
        # Get the text directly inside the element, if empty make it None
        text = escapeText (item.text)
        if (text is not None):
            text = text.strip ()
            if (text == ""):
                text = None
        # Get the text following the element, if empty make it None
        tail = escapeText (item.tail)
        if (tail is not None):
            tail = tail.strip ()
            if (tail == ""):
                tail = None
        # If there are children, save the tail data until later
        if (childrenCount > 0):
            tailStack.append (tail) # defer to later
            tail = None             # ignore this for now
        elif (len (tailStack) > 0):
            previousTail = tailStack.pop () # get deferred tail
            if (previousTail is not None):
                tail = previousTail # use it
        # Handle an anchor with a valid href
        if (item.tag == 'a' and text is not None):
            href = item.attrib.get ('href')
            # Turn blank href into None
            if (href is not None):
                href = href.strip ()
                if (href == ""):
                    href = None
            # Convert href into a link
            if (href is not None):
                frags.append (surroundWithSpace (frags, convertLink (href, text), tail))
                if (tail is not None):
                    frags.append (tail)
        elif (item.tag == 'b' and text is not None):
            frags.append (surroundWithSpace (frags, "'''" + text + "'''", tail))
            if (tail is not None):
                frags.append (tail)
        elif (item.tag == 'span' and text is not None):
            frags.append (surroundWithSpace (frags, convertSpanText (item), tail))
            if (tail is not None):
                frags.append (tail)
        else:
            if (text is not None):
                frags.append (surroundWithSpace (frags, text, tail))
            if (tail is not None):
                frags.append (tail)
    # If text fragments were accumulated, join them into a single string
    if (len (frags) == 0):
        return None
    else:
        return ''.join (frags)

def convertChildren (element, sectionDepth, listDepth, parents):
    '''
    Call convert on each child of element, the driver for recursion.
    '''
    parents.append (element.tag)
    for child in element:
        convert (child, sectionDepth, listDepth, parents)
    parents.pop ()

def convert_p (element, sectionDepth, listDepth, parents):
    '''
    Convert a paragraph into MediaWiki syntax.

    Rule: p becomes double-newline separated paragraphs, using only text node children.
    '''
    all = convertText (element)
    if (all is not None):
        # Paragraphs need a normal line ending plus one more blank line
        print all + "\n"

def convert_span (element, sectionDepth, listDepth, parents):
    '''
    Just like convert_p but no newlines at the end.

    Rule: for <span class="code">ABC</span> turn into <code>ABC</code>.
    '''
    print convertSpanText (element)

def convert_pre (element, sectionDepth, listDepth, parents):
    '''
    Convert a pre into MediaWiki syntax.

    Rule: pre is just verbatim, except convertText might have formatting
    like bold with triple single-quote, so instead of the pre tag we prepend
    a space to every line.
    '''
    all = convertText (element)
    if (all is not None):
        for line in all.splitlines ():
            print " " + line

def convert_div (element, sectionDepth, listDepth, parents):
    '''
    Convert a paragraph into MediaWiki syntax.

    Rule: div id becomes new section but only if it has non-whitespace text node children,
          use the div id as the section name.
    Rule: For <div class="code"> treat nested child <pre> element as the only content.
    Rule: For <div id="footer"> omit completely.
    Rule: For <div class="alert"> header is bold, row is normal text.
    '''
    # sectionName = element.get ('id')
    # if (sectionName is None):
    #     sectionName = "unknown"
    # print "=" * sectionDepth + sectionName + "=" * sectionDepth
    elementClass = element.attrib.get ('class')
    elementId = element.attrib.get ('id')
    if (elementClass is not None and elementClass == "code"):
        pre = element.find (".//pre")
        if (pre is not None):
            parents.append ("div")
            convert_pre (pre, sectionDepth, listDepth, parents)
            parents.pop ()
    elif (elementClass is not None and elementClass == "alert"):
        # Get first row first (header) column
        alertHeader = element.find ("./table/tr[1]/th")
        # Get second row first (data) column
        alertData = element.find ("./table/tr[2]/td")
        if (alertHeader is not None and alertData is not None):
            alertHeaderText = convertText (alertHeader)
            alertDataText = convertText (alertData)
            # Add extra newline so next output isn't in same paragraph
            print ("{:} -- {:}\n".format (alertHeaderText, alertDataText))
        else:
            # Not in known format, so simply recurse
            convertChildren (element, sectionDepth + 1, listDepth, parents)
    elif (elementId is not None and elementId == "footer"):
        # Skip this div
        pass
    else:
        convertChildren (element, sectionDepth + 1, listDepth, parents)

def convert_h1 (element, sectionDepth, listDepth, parents):
    '''
    Convert a heading into MediaWiki syntax.

    Rule: h1 text children nodes becomes "==text==", ignoring intermediate elements
          like span in the case of h1/span.
    '''
    all = allText (element)
    # Headers turn into sections with the right number of equals signs
    print "\n" + "=" * sectionDepth + all + "=" * sectionDepth

def convert_ul (element, sectionDepth, listDepth, parents):
    '''
    Convert a paragraph into MediaWiki syntax.

    Rule: ul/li become "* text"
    '''
    # Unordered lists we simply recurse and then 'li' gets converted
    convertChildren (element, sectionDepth, listDepth + 1, parents)

def convert_li (element, sectionDepth, listDepth, parents):
    '''
    Convert a paragraph into MediaWiki syntax.

    Rule: ul/li become "* text"
    '''
    #@@@TODO -- ensure parent is "ul"
    all = convertText (element)
    if (all is not None):
        # List elements turn into the right number of asterisks
        print "*" * listDepth + " " + all

def convert_dl (element, sectionDepth, listDepth, parents):
    '''
    Convert a paragraph into MediaWiki syntax.

    Rule: dl/dt becomes "; text"
          dl/dd becomes ": text" (same line as above)
    '''
    # Definition list we simply recurse and the 'dt' gets converted
    convertChildren (element, sectionDepth, listDepth, parents)

def convert_dt (element, sectionDepth, listDepth, parents):
    '''
    Convert a paragraph into MediaWiki syntax.

    Rule: dl/dt becomes "; text"
          dl/dd becomes ": text" (same line as above)
    '''
    #@@@TODO -- ensure parent is "dl"
    all = convertText (element)
    if (all is not None):
        # A semicolon and the definition term, expect a 'dd' afterward
        sys.stdout.write ("; " + all)

def convert_dd (element, sectionDepth, listDepth, parents):
    '''
    Convert a paragraph into MediaWiki syntax.

    Rule: dl/dt becomes "; text"
          dl/dd becomes ": text" (same line as above)
    '''
    #@@@TODO -- ensure parent is "dl" (and maybe previous sibling is "dt"?)
    all = convertText (element)
    if (all is not None):
        # A definition follows a 'dt' and has a colon and content
        print ": " + all

def convert_table (element, sectionDepth, listDepth, parents):
    '''
    Convert a table into MediaWiki syntax.

    Rule: Surround with "{|" and "|}", and recurse on children.
    '''
    print "{| class='wikitable'"
    convertChildren (element, sectionDepth, listDepth, parents)
    print "|}"

def convert_tr (element, sectionDepth, listDepth, parents):
    '''
    Convert a table row into MediaWiki syntax.
    '''
    print "|-"
    convertChildren (element, sectionDepth, listDepth, parents)

def convert_th (element, sectionDepth, listDepth, parents):
    '''
    Convert a table header cell into MediaWiki syntax.
    '''
    sys.stdout.write ("! ")
    text = convertText (element)
    if (text is not None):
        print text

def convert_td (element, sectionDepth, listDepth, parents):
    '''
    Convert a table data cell into MediaWiki syntax.
    '''
    sys.stdout.write ("| ")
    text = convertText (element)
    if (text is not None):
        print text

def convert (element, sectionDepth, listDepth, parents):
    '''
    Convert html element into MediaWiki syntax according to a set of rules.
    '''
    # Grab all the combined text nodes underneath element
    all = allText (element)
    # Skip the element completely if there is no text inside of it anywhere
    if (all is not None):
        if (element.tag == "div"):
            convert_div (element, sectionDepth, listDepth, parents)
        elif (element.tag == "p"):
            convert_p (element, sectionDepth, listDepth, parents)
        elif (element.tag == "span"):
            convert_span (element, sectionDepth, listDepth, parents)
        elif (element.tag == "h1"):
            convert_h1 (element, sectionDepth, listDepth, parents)
        elif (element.tag == "ul"):
            convert_ul (element, sectionDepth, listDepth, parents)
        elif (element.tag == "li"):
            convert_li (element, sectionDepth, listDepth, parents)
        elif (element.tag == "dl"):
            convert_dl (element, sectionDepth, listDepth, parents)
        elif (element.tag == "dt"):
            convert_dt (element, sectionDepth, listDepth, parents)
        elif (element.tag == "dd"):
            convert_dd (element, sectionDepth, listDepth, parents)
        elif (element.tag == "table"):
            convert_table (element, sectionDepth, listDepth, parents)
        elif (element.tag == "tr"):
            convert_tr (element, sectionDepth, listDepth, parents)
        elif (element.tag == "th"):
            convert_th (element, sectionDepth, listDepth, parents)
        elif (element.tag == "td"):
            convert_td (element, sectionDepth, listDepth, parents)

# Start walking element recursively applying various rules
convertChildren (element, sectionDepth=2, listDepth=0, parents=[])
