#! /bin/sh

# Directory of github clone
M="msdn-js"

#
# This script places *.wiki and upload-mapping.wiki into this directory,
# which will become a subdirectory of this script.  This lends itself to
# performing round after round of successive refinement of output.
#
ROUND="round-alice"

# Log output for later wiki page update
LOGWIKI="msdn-js batch conversion"
# Absolute path to log file
LOGFILE=$(pwd -P)"/complete-convert.log"
echo -n "Batch conversion results of " > "$LOGFILE"
date >> "$LOGFILE"
echo "<pre><nowiki>" >> "$LOGFILE"

#
# echox will echo to stdout but also capture to a log file as well
# to be uploaded as a kind of batch processor output capture.
#
function echox
{
    echo "$@" >> "$LOGFILE"
    echo "$@"
}

#
# Verify the site URL works by extracting from site the wiki version and printing it.
# Typical function usage: WIKI_VERSION=$(TestSiteUrl "https://site/wiki").
# Upon error, the error info is returned.
#
function TestSiteUrl
{
    curl --insecure "${1}/api.php?action=query&meta=siteinfo&format=xml" 2>/dev/null | xmllint --format - 2>/dev/null | grep -e generator -e error | sed -e 's/^.*generator="\([^"]*\)".*$/\1/' -e 's/^.*error.*info="\([^"]*\)".*$/Error: \1/'
}

#
# Detect what directory this script is running in, useful to run sibling
# scripts in the same directory.
#
# Code from:
# http://stackoverflow.com/questions/59895/can-a-bash-script-tell-what-directory-its-stored-in
#
# To capture return string:   DIR=$(ScriptDirectory)
# To echo to stdout:          ScriptDirectory
#
function ScriptDirectory
{
    local SOURCE="${BASH_SOURCE[0]}"
    local DIR="$( dirname "$SOURCE" )"
    while [ -h "$SOURCE" ]; do 
      SOURCE="$(readlink "$SOURCE")"
      [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
      DIR="$( cd -P "$( dirname "$SOURCE"  )" && pwd )"
    done
    DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"

    echo $DIR
}

# Location of site using environment variable
if [ -z "$WPD_API_ROOT" ]; then
    echox "Missing WPD_API_ROOT environment variable for wiki site URL"
    exit 1
fi

# User name for login to wiki
if [ -z "$WPD_USERNAME" ]; then
    echox "Missing WPD_USERNAME environment variable for user login"
    exit 1
fi

# User password for login to wiki
if [ -z "$WPD_PASSWORD" ]; then
    echox "Missing WPD_PASSWORD environment variable for user login"
    exit 1
fi

echox "Testing wiki..."
WIKI_VERSION=$(TestSiteUrl "$WPD_API_ROOT")
if [ -z "$WIKI_VERSION" ]; then
    echox "ERROR: unable to access site $WPD_API_ROOT"
    exit 1
fi
echox "    Success, wiki version: $WIKI_VERSION"

# Directory of this script (so it can find python scripts next to it)
SCRIPTDIR=$(ScriptDirectory)

# Actual directory of ROUND output, ensure it exists
ROUNDDIR="${SCRIPTDIR}/${ROUND}"
if [ ! -d "$ROUNDDIR" ]; then
    echox "Creating directory $ROUNDDIR"
    mkdir "$ROUNDDIR"
    if [ ! -d "$ROUNDDIR" ]; then
        echox "Unable to create directory $ROUNDDIR"
        exit 1
    fi
fi

# Don't clone a repo inside another repo
if [ "$(pwd -P)" = "$SCRIPTDIR" ]; then
    echox "You must run this script from another directory to avoid"
    echox "mixing files from two repositories together, for example:"
    echox
    echox "    cd .."
    echox "    msdn-js-conversion/complete-convert"
    exit 1
fi

# Clone from github if not already present
if [ -d "${M}" ]; then
    # Ensure we created this directory, so that we don't destroy someone's
    # work in progress
    if [ ! -f "${M}/ZZZ-owned-by-complete-convert" ]; then
        echox "It doesn't appear this script created the ${M} directory."
        echox "To avoid destroying existing files, this script will not continue."
        exit 1
    fi
else
    echox "Cloning from github..."
    git clone https://github.com/webplatform/msdn-js.git
    if [ ! -d "${M}" ]; then
        echox "ERROR: Unable to clone source files from github"
        exit 1
    fi
    touch "${M}/ZZZ-owned-by-complete-convert"
fi

# Change to cloned repository directory
cd "${M}"

# # Skipping this for now, all files are well-formed
# echox ""
# echox "Verify files are well-formed"
# if [ ! -f "ZZZ-xmllint" ]; then
#     # Don't repeat this step
#     touch "ZZZ-xmllint"
# 
#     # Run xmllint on each to ensure each file is well-formed XML
#     for file in *.html; do
#         echox "     $file"
#         if [ "$file" = "js_toc.html" ]; then
#             echox "Ignoring non-content file"
#             continue
#         fi
# 
#         # See if xmllint reports non-well-formed XML
#         if [ ! "$(xmllint --nonet --noout $file 2>&1 | wc -c)" = "0" ]; then
#             echox "ERROR: xmllint reported a problem"
#             exit 1
#         fi
#     done
# fi

# Fix 1st file name anomaly
echox ""
echox "Fixing 1st file name anomaly"
if [ ! -f "Conditional__Ternary-Operator.html" ]; then
    echox "Renaming file"
    mv 'Conditional__Ternary)-Operator.html' 'Conditional__Ternary-Operator.html'
    echox "Editing js_toc.html"
    TMPFILE=$(mktemp)
    sed 's/a href="Conditional__Ternary.html"/a href="Conditional__Ternary-Operator.html"/' js_toc.html > "$TMPFILE"
    mv "$TMPFILE" js_toc.html
fi

# Fix 2nd file name anomaly
echox ""
echox "Fixing 2nd file name anomaly"
if [ -f "Increment.html" ]; then
    echox "Renaming file"
    mv 'Increment.html' 'Increment-and-Decrement-Operators.html'
    echox "Editing js_toc.html"
    TMPFILE=$(mktemp)
    sed 's/Increment-Operators.html/Increment-and-Decrement-Operators.html/' js_toc.html > "$TMPFILE"
    mv "$TMPFILE" js_toc.html
fi

# Fix 3rd file name anomaly
echox ""
echox "Fixing 3rd file name anomaly"
if [ -f "Modulus-Assignment-Operator-.html" ]; then
    echox "Renaming file"
    mv 'Modulus-Assignment-Operator-.html' 'Modulus-Assignment-Operator.html'
    echox "Editing js_toc.html"
    TMPFILE=$(mktemp)
    sed 's/Modulus-Assignment-Operator-.html/Modulus-Assignment-Operator.html/' js_toc.html > "$TMPFILE"
    mv "$TMPFILE" js_toc.html
fi

# Fix js_toc.html problems: meta tag, byte-order mark, closing tag
echox ""
echox "Fixing table of contents problems (js_toc.html)"
if grep -q '<meta charset="utf-8">' js_toc.html; then
    TMPFILE=$(mktemp)
    sed -e 's/^.*DOCTYPE html.*$/<?xml version="1.0"?>/' \
        -e 's/<meta charset="utf-8">/<meta charset="utf-8"\/>/' \
        -e 's/<\/body>/<\/body><\/html>/' \
        js_toc.html > "$TMPFILE"
    mv "$TMPFILE" js_toc.html
fi

#
# For better readability and ease of matching single lines when using grep,
# reformat the XML.
#
echox ""
echox "Formatting files in place for readability"
if [ ! -f "ZZZ-reformat" ]; then
    # Don't repeat this step
    touch "ZZZ-reformat"

    for file in *.html; do
        echox "     $file"
        TMPFILE=$(mktemp)
        xmllint --nonet --format "$file" > "$TMPFILE"
        mv "$TMPFILE" "$file"
    done
fi

# Transliterate unusual characters like magic unicode space to ordinary ascii space
echox ""
echox "Transliterating unusual charcters into ordinary characters"
if [ ! -f "ZZZ-simplify-unicode" ]; then
    # Don't repeat this step
    touch "ZZZ-simplify-unicode"

    for file in *.html; do
        echox "     $file"
        TMPFILE=$(mktemp)
        iconv -f UTF-8 -t ascii//TRANSLIT < "$file" > "$TMPFILE"
        mv "$TMPFILE" "$file"
    done
fi

# Eliminate the "(JavaScript)" from everywhere, we don't need to disambiguate
echox ""
echox "Eliminate '(JavaScript)' from everywhere"
if [ ! -f "ZZZ-remove-disambiguation" ]; then
    # Don't repeat this step
    touch "ZZZ-remove-disambiguation"

    for file in $(grep -l "(JavaScript)" *.html); do
        echox "     $file"
        TMPFILE=$(mktemp)
        sed -e 's/ *<i>(JavaScript)<\/i>//g' -e 's/ *(JavaScript)//g' < "$file" > "$TMPFILE"
        mv "$TMPFILE" "$file"
    done
fi

echox ""
echox "Determining filename to wiki page name mapping"
if [ ! -f "ZZZ-mapping" ]; then
    # Don't repeat this step
    touch "ZZZ-mapping"

    # Create an "upload-mapping.wiki" file containing "FILENAME PAGENAME" lines
    echox "    Creating upload-mapping.wiki"
    "${SCRIPTDIR}/extract-mapping" "js_toc.html" "29f83a2c-48c5-49e2-9ae0-7371d2cda2ff" > "upload-mapping.wiki"
fi

#
# Fix internal links within files by grabbing from each file "FILENAME":
#   <meta name="Microsoft.Help.Id" content="ac6ad343-7663-406a-a2b7-4cc5025ca3d6"/>
# and every anchor linking to that in all files, replace:
#   <a href="1c46a560-ec8d-41c5-a806-30c4843789c4.htm">
# with:
#   <a href="FILENAME">
# also every mshelp:link whose keywords links to that in all files, replace:
#   <mshelp:link keywords="CE2202BB-7EC9-4F5A-BF48-3A04FEFF283E" tabindex="0">Date Object</mshelp:link>
# with:
#   <a href="FILENAME">Date Object</a>
#
echox ""
echox "Fix internal links within files"
if [ ! -f "ZZZ-internallinks" ]; then
    # Don't repeat this step
    touch "ZZZ-internallinks"

    for file in *.html; do
        echox "     $file"
        if [ "$file" = "js_toc.html" ]; then
            echox "Ignoring non-content file"
            continue
        fi

        # Grab the content attribute value from meta element with name="Microsoft.Help.Id"
        HELP_ID=$(grep 'meta name="Microsoft.Help.Id"' $file | sed 's/^.*content="\([^"]*\)".*$/\1/')
        echox "        Fixing links to ${HELP_ID}"
        for fix in $(grep -il -e "${HELP_ID}.htm" -e "mshelp:link keywords=.${HELP_ID}" *.html); do
            echox "            In page $fix"
            # We need to determine the upload name of the file and use that
            # instead of the native filename when fixing links
            PAGENAME=${file%%.html}
            UPLOADNAME=$(grep "| ${PAGENAME}.html |" upload-mapping.wiki | sed 's/^| .* || //')
            ESCAPEDNAME=${UPLOADNAME//\//\\/}
            TMPFILE=$(mktemp)
            sed -e "s/${HELP_ID}.htm/${ESCAPEDNAME}.html/i" \
                -e "s/<mshelp:link keywords=\"${HELP_ID}\".*>\(.*\)<\/mshelp:link>/<a href='${ESCAPEDNAME}.html'>\1<\/a>/i" \
                "$fix" > "$TMPFILE"
            mv "$TMPFILE" "$fix"
        done
    done
fi

#
# Convert JavaScript-Reference.html, only <div id="mainBody">, into new section
# of page http://docs.webplatform.org/wiki/javascript
#
# Rule: div id becomes new section but only if it has non-whitespace text node children,
#       use the div id as the section name.
# Rule: p becomes double-newline separated paragraphs, using only text node children.
# Rule: h1 text children nodes (might be h1/span) becomes "==text=="
# Rule: ul/li become "* text"
# Rule: dl/dt becomes "; text"
#       dl/dd becomes ": text" (same line as above)
#
echox ""
echox "Converting all HTML pages"
if [ ! -f "ZZZ-convert-all" ]; then
    # Don't repeat this step
    touch "ZZZ-convert-all"

    for file in *.html; do
        echox "     $file"
        if [ "$file" = "js_toc.html" ]; then
            echox "Ignoring non-content file"
            continue
        fi

        TMPFILE=$(mktemp)
        "${SCRIPTDIR}/simple-convert" "$file" "mainBody" > "$TMPFILE"
        if [ ! $? = 0 ]; then
            echox "ERROR: problem discovered"
            rm "$TMPFILE"
            exit 1
        fi
        mv "$TMPFILE" "${file%%.html}.wiki"
   done
fi

# Upload to the wiki new page versions, using *.wiki
echox ""
echox "Upload to the wiki new page versions"
if [ ! -f "ZZZ-upload-to-wiki" ]; then
    # Don't repeat this step
    touch "ZZZ-upload-to-wiki"

    for file in *.wiki; do
        if [ "$file" = "upload-mapping.wiki" ]; then
            PAGENAME="upload-mapping.wiki"
            UPLOADNAME="Upload mapping"
        else
            PAGENAME=${file%%.wiki}
            UPLOADNAME=$(grep "| ${PAGENAME}.html |" upload-mapping.wiki | sed 's/^| .* || //')
        fi
        echox "    $PAGENAME becomes $UPLOADNAME"
        if ! "${SCRIPTDIR}/modified-wpd" edit "$UPLOADNAME" "$file"; then
            echox "ERROR: failed to upload new version of page: $PAGENAME"
            exit 1
        fi
    done
fi

#
# Move the wiki pages and upload mapping into the ROUNDDIR subdirectory
# to commit for further processing in the next round.
#
echox ""
echox "Copy the wiki pages and upload mapping wiki page to the round subdirectory"
if [ ! -f "ZZZ-move-to-round" ]; then
    # Don't repeat this step
    touch "ZZZ-move-to-round"

    cp *.wiki "$ROUNDDIR"
fi

# Success if we got here without exiting early
echox "Overall conversion successful, remember to commit files in:"
echox "    $ROUNDDIR"

# END USING echox FROM THIS POINT FORWARD
echo "</nowiki></pre>" >> "$LOGFILE"

# Try to upload batch conversion results to wiki
echo "Batch conversion results in $LOGFILE"
