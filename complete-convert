#! /bin/sh

# Verify the site URL works
function TestSiteUrl
{
    curl "${1}/api.php?action=query&meta=siteinfo&format=xml" 2>/dev/null | xmllint --format - 2>/dev/null | grep -e generator | sed 's/^.*generator="\([^"]*\)".*$/\1/'
}

#
# Detect what directory this script is running in, useful to run sibling
# scripts in the same directory.
#
# Code from:
# http://stackoverflow.com/questions/59895/can-a-bash-script-tell-what-directory-its-stored-in
#
# To capture return string:   DIR=$(ScriptDirectory)
# To echo to stdout:          ScriptDirectory
#
function ScriptDirectory
{
    local SOURCE="${BASH_SOURCE[0]}"
    local DIR="$( dirname "$SOURCE" )"
    while [ -h "$SOURCE" ]; do 
      SOURCE="$(readlink "$SOURCE")"
      [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
      DIR="$( cd -P "$( dirname "$SOURCE"  )" && pwd )"
    done
    DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"

    echo $DIR
}

# Directory of github clone
M="msdn-js"

# Location of site using environment variable
if [ -z "$WPD_API_ROOT" ]; then
    echo "Missing WPD_API_ROOT environment variable for wiki site URL"
    exit 1
fi

# User name for login to wiki
if [ -z "$WPD_USERNAME" ]; then
    echo "Missing WPD_USERNAME environment variable for user login"
    exit 1
fi

# User password for login to wiki
if [ -z "$WPD_PASSWORD" ]; then
    echo "Missing WPD_PASSWORD environment variable for user login"
    exit 1
fi

echo "Testing wiki..."
WIKI_VERSION=$(TestSiteUrl "$WPD_API_ROOT")
if [ -z "$WIKI_VERSION" ]; then
    echo "ERROR: unable to access site $WPD_API_ROOT"
    exit 1
fi
echo "Success, wiki version: $WIKI_VERSION"

# Directory of this script (so it can find python scripts next to it)
SCRIPTDIR=$(ScriptDirectory)

# Done clone a repo inside another repo
if [ "$(pwd -P)" = "$SCRIPTDIR" ]; then
    echo "You must run this script from another directory to avoid"
    echo "mixing files from two repositories together, for example:"
    echo
    echo "    cd .."
    echo "    msdn-js-conversion/complete-convert"
    exit 1
fi

# Clone from github if not already present
if [ -d "${M}" ]; then
    # Ensure we created this directory, so that we don't destroy someone's
    # work in progress
    if [ ! -f "${M}/ZZZ-owned-by-complete-convert" ]; then
        echo "It doesn't appear this script created the "${M}" directory."
        echo "To avoid destroying existing files, this script will not continue."
        exit 1
    fi
else
    echo "Cloning from github..."
    git clone https://github.com/webplatform/msdn-js.git
    if [ ! -d "${M}" ]; then
        echo "ERROR: Unable to clone source files from github"
        exit 1
    fi
    touch "${M}/ZZZ-owned-by-complete-convert"
fi

# Change to cloned repository directory
cd "${M}"

echo "Verify files are well-formed"
if [ ! -f "ZZZ-xmllint" ]; then
    # Don't repeat this step
    touch "ZZZ-xmllint"

    # Run xmllint on each to ensure each file is well-formed XML
    for file in *.html; do
        echo "==== $file"
        if [ "$file" = "js_toc.html" ]; then
            echo "Ignoring non-content file"
            continue
        fi

        # See if xmllint reports non-well-formed XML
        if [ ! "$(xmllint --nonet --noout $file 2>&1 | wc -c)" = "0" ]; then
            echo "ERROR: xmllint reported a problem"
            exit 1
        fi
    done
fi

# Fix file name anomaly
echo "Fixing file name anomaly"
if [ ! -f "Conditional__Ternary-Operator.html" ]; then
    echo "Renaming file"
    mv 'Conditional__Ternary)-Operator.html' 'Conditional__Ternary-Operator.html'
    echo "Editing js_toc.html"
    TMPFILE=$(mktemp)
    sed 's/a href="Conditional__Ternary.html"/a href="Conditional__Ternary-Operator.html"/' js_toc.html > "$TMPFILE"
    mv "$TMPFILE" js_toc.html
fi

# For better readability, reformat the XML
echo "Formatting files in place for readability"
if [ ! -f "ZZZ-reformat" ]; then
    # Don't repeat this step
    touch "ZZZ-reformat"

    for file in *.html; do
        echo "==== $file"
        if [ "$file" = "js_toc.html" ]; then
            echo "Ignoring non-content file"
            continue
        fi
        TMPFILE=$(mktemp)
        xmllint --nonet --format "$file" > "$TMPFILE"
        mv "$TMPFILE" "$file"
    done
fi

#
# Fix internal links within files by grabbing from each file "FILENAME":
#   <meta name="Microsoft.Help.Id" content="ac6ad343-7663-406a-a2b7-4cc5025ca3d6"/>
# and every anchor linking to that in all files, replace:
#   <a href="1c46a560-ec8d-41c5-a806-30c4843789c4.htm">
# with:
#   <a href="FILENAME">
#
echo "Fix internal links within files"
if [ ! -f "ZZZ-internallinks" ]; then
    # Don't repeat this step
    touch "ZZZ-internallinks"

    for file in *.html; do
        echo "==== $file"
        if [ "$file" = "js_toc.html" ]; then
            echo "Ignoring non-content file"
            continue
        fi

        # Grab the content attribute value from meta element with name="Microsoft.Help.Id"
        HELP_ID=$(grep 'meta name="Microsoft.Help.Id"' $file | sed 's/^.*content="\([^"]*\)".*$/\1/')
        echo "Fixing links to ${HELP_ID}.htm"
        for fix in $(grep -l "${HELP_ID}.htm" *.html); do
            echo "    $fix"
            TMPFILE=$(mktemp)
            sed "s/${HELP_ID}.htm/${file}/" "$fix" > "$TMPFILE"
            mv "$TMPFILE" "$fix"
        done
    done
fi

#
# Convert JavaScript-Reference.html, only <div id="mainBody">, into new section
# of page http://docs.webplatform.org/wiki/javascript
#
# Rule: div id becomes new section but only if it has non-whitespace text node children,
#       use the div id as the section name.
# Rule: p becomes double-newline separated paragraphs, using only text node children.
# Rule: h1 text children nodes (might be h1/span) becomes "==text=="
# Rule: ul/li become "* text"
# Rule: dl/dt becomes "; text"
#       dl/dd becomes ": text" (same line as above)
#
echo "Converting JavaScript-Reference.html"
if [ ! -f "ZZZ-simple-convert-test" ]; then
    # Don't repeat this step
    touch "ZZZ-simple-convert-test"

    TMPFILE=$(mktemp)
    "${SCRIPTDIR}/simple-convert" "JavaScript-Reference.html" "mainBody" > "$TMPFILE"
    if [ ! $? = 0 ]; then
        echo "ERROR: problem discovered"
        rm "$TMPFILE"
        exit 1
    fi
    mv "$TMPFILE" "JavaScript-Reference.wiki"
fi

# Upload to the wiki new page versions, using *.wiki
if [ ! -f "ZZZ-upload-to-wiki" ]; then
    # Don't repeat this step
    touch "ZZZ-upload-to-wiki"

    for file in *.wiki; do
        PAGENAME=${file%%.wiki}
        echo "==== $file"
        echo "Uploading new version of $PAGENAME"
        if ! "${SCRIPTDIR}/modified-wpd" edit "$PAGENAME" "$file"; then
            echo "ERROR: failed to upload new version of page: $PAGENAME"
            exit 1
        fi
    done
fi

# Success if we got here without exiting early
echo "Overall conversion successful"
