Prevents the modification of attributes of existing properties, and prevents the addition of new properties.

 Object.seal( object )

==Parameters==
; object: Required. The object on which to lock the attributes.

==Return Value==
The object that is passed to the function.


==Exceptions==
If the object argument is not an object, a TypeError exception is thrown.


==Remarks==
The '''Object.seal''' function does both of the following:

* Makes the object non-extensible, so that new properties cannot be added to it.
* Sets the configurable attribute to false for all properties of the object.
When the configurable attribute is false , property attributes cannot be changed and the property cannot be deleted. When configurable is false and writable is true , the value and writable attributes can be changed.

The '''Object.seal''' function does not change the writable attribute.

For more information about how to set property attributes, see [[Objects/Object/Object.defineProperty Function|Object.defineProperty Function]]. To get the attributes of a property, you can use the [[Objects/Object/Object.getOwnPropertyDescriptor Function|Object.getOwnPropertyDescriptor Function]].

The following related functions prevent the modification of object attributes.

{| class='wikitable'
|-
! Function
! Object is made non-extensible
! configurable is set to false for each property
! writable is set to false for each property
|-
| [[Objects/Object/Object.preventExtensions Function|Object.preventExtensions]]
| Yes
| No
| No
|-
| Object.seal
| Yes
| Yes
| No
|-
| [[Objects/Object/Object.freeze Function|Object.freeze]]
| Yes
| Yes
| Yes
|}
The following functions return true if all of the conditions marked in the following table are true.

{| class='wikitable'
|-
! Function
! Object is extensible?
! configurable is false for all properties?
! writable is false for all data properties?
|-
| [[Objects/Object/Object.isExtensible Function|Object.isExtensible]]
| Yes
| No
| No
|-
| [[Objects/Object/Object.isSealed Function|Object.isSealed]]
| No
| Yes
| No
|-
| [[Objects/Object/Object.isFrozen Function|Object.isFrozen]]
| No
| Yes
| Yes
|}

==Example==
The following example illustrates the use of the '''Object.seal''' function.

 // Create an object that has two properties.
 var obj = { pasta: "spaghetti", length: 10 };
 // Seal the object.
 Object.seal(obj);
 document.write(Object.isSealed(obj));
 document.write("&lt;br/&gt;");
 
 // Try to add a new property, and then verify that it is not added. 
 obj.newProp = 50;
 document.write(obj.newProp);
 document.write("&lt;br/&gt;");
 
 // Try to delete a property, and then verify that it is still present. 
 delete obj.length;
 document.write(obj.length);
 
 // Output:
 // true
 // undefined
 // 10

==Requirements==
Supported in the following document modes: Internet Explorer 9 standards and Internet Explorer 10 standards. Also supported in Windows Store apps. See Version Information.

Not supported in the following document modes: Quirks, Internet Explorer 6 standards, Internet Explorer 7 standards, Internet Explorer 8 standards.


==See Also==

              

              

              

              

              
